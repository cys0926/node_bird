{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle, takeLatest, takeEvery, takeLeading, takeMaybe } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"names":["all","fork","call","take","put","delay","debounce","throttle","takeLatest","takeEvery","takeLeading","takeMaybe","axios","logInAPI","post","logIn","result","type","data","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/index.js"],"sourcesContent":["import {\n  all,\n  fork,\n  call,\n  take,\n  put,\n  delay,\n  debounce,\n  throttle,\n  takeLatest,\n  takeEvery,\n  takeLeading,\n  takeMaybe,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield put({ type: \"LOG_OUT_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post(\"/api/post\");\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI); // call 은 동기, fork 는 비동기\n    yield put({ type: \"ADD_POST_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"ADD_POST_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\n\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACTC,WAAW,EACXC,SAAS,QACJ,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,GAAG;EAClB,OAAOD,KAAK,CAACE,IAAI,CAAC,YAAY,CAAC;AACjC;AAEA,UAAUC,KAAK,GAAG;EAChB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMd,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC;IACrC,MAAMT,GAAG,CAAC;MAAEa,IAAI,EAAE,gBAAgB;MAAEC,IAAI,EAAEF,MAAM,CAACE;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMf,GAAG,CAAC;MAAEa,IAAI,EAAE,gBAAgB;MAAEC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EAChE;AACF;AAEA,SAASG,SAAS,GAAG;EACnB,OAAOT,KAAK,CAACE,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAM,GAAG;EACjB,IAAI;IACF,MAAMN,MAAM,GAAG,MAAMd,IAAI,CAACmB,SAAS,CAAC,CAAC,CAAC;IACtC,MAAMjB,GAAG,CAAC;MAAEa,IAAI,EAAE,iBAAiB;MAAEC,IAAI,EAAEF,MAAM,CAACE;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMf,GAAG,CAAC;MAAEa,IAAI,EAAE,iBAAiB;MAAEC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EACjE;AACF;AAEA,SAASK,UAAU,GAAG;EACpB,OAAOX,KAAK,CAACE,IAAI,CAAC,WAAW,CAAC;AAChC;AAEA,UAAUU,OAAO,GAAG;EAClB,IAAI;IACF,MAAMR,MAAM,GAAG,MAAMd,IAAI,CAACqB,UAAU,CAAC,CAAC,CAAC;IACvC,MAAMnB,GAAG,CAAC;MAAEa,IAAI,EAAE,kBAAkB;MAAEC,IAAI,EAAEF,MAAM,CAACE;IAAK,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMf,GAAG,CAAC;MAAEa,IAAI,EAAE,kBAAkB;MAAEC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EAClE;AACF;AAEA,UAAUO,UAAU,GAAG;EACrB,MAAMtB,IAAI,CAAC,gBAAgB,EAAEY,KAAK,CAAC;AACrC;AAEA,UAAUW,WAAW,GAAG;EACtB,MAAMvB,IAAI,CAAC,iBAAiB,EAAEmB,MAAM,CAAC;AACvC;AAEA,UAAUK,YAAY,GAAG;EACvB,MAAMxB,IAAI,CAAC,kBAAkB,EAAEqB,OAAO,CAAC;AACzC;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC;EACA,MAAM5B,GAAG,CAAC,CAACC,IAAI,CAACwB,UAAU,CAAC,EAAExB,IAAI,CAACyB,WAAW,CAAC,EAAEzB,IAAI,CAAC0B,YAAY,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}