{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_REQUEST","ADD_POST_TO_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","error","response","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","log","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/post.js"],"sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  REMOVE_POST_REQUEST,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({ type: ADD_POST_SUCCESS, data: { id, content: action.data } });\n    yield put({ type: ADD_POST_TO_ME, data: id });\n  } catch (err) {\n    yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({ type: ADD_POST_SUCCESS, data: { id, content: action.data } });\n    yield put({ type: ADD_POST_TO_ME, data: id });\n  } catch (err) {\n    yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n  } catch (err) {\n    yield put({ type: ADD_COMMENT_FAILURE, error: err.response.data });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}