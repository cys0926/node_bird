{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n    yield;\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","err","error","response","addCommentAPI","postId","addComment","console","log","watchAddPost","watchAddComment","postSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/post.js"],"sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n} from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: ADD_POST_SUCCESS, data: action.data });\n    yield \n  } catch (err) {\n    yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n  } catch (err) {\n    yield put({ type: ADD_COMMENT_FAILURE, error: err.response.data });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,mBAAmB,EAAEC,mBAAmB,EACxCC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,QACX,kBAAkB;AAEzB,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOR,KAAK,CAACS,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMd,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MAAEc,IAAI,EAAEN,gBAAgB;MAAEE,IAAI,EAAEG,MAAM,CAACH;IAAK,CAAC,CAAC;IACxD,KAAK;EACP,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMf,GAAG,CAAC;MAAEc,IAAI,EAAER,gBAAgB;MAAEU,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACP;IAAK,CAAC,CAAC;EACjE;AACF;AAEA,SAASQ,aAAa,CAACR,IAAI,EAAE;EAC3B,OAAOR,KAAK,CAACS,IAAI,CAAE,aAAYD,IAAI,CAACS,MAAO,UAAS,EAAET,IAAI,CAAC;AAC7D;AAEA,UAAUU,UAAU,CAACP,MAAM,EAAE;EAC3B,IAAI;IACFQ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B;IACA,MAAMvB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMC,GAAG,CAAC;MAAEc,IAAI,EAAET,mBAAmB;MAAEK,IAAI,EAAEG,MAAM,CAACH;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMf,GAAG,CAAC;MAAEc,IAAI,EAAEX,mBAAmB;MAAEa,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACP;IAAK,CAAC,CAAC;EACpE;AACF;AAEA,UAAUa,YAAY,GAAG;EACvB,MAAMtB,UAAU,CAACM,gBAAgB,EAAEK,OAAO,CAAC;AAC7C;AAEA,UAAUY,eAAe,GAAG;EAC1B,MAAMvB,UAAU,CAACG,mBAAmB,EAAEgB,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUK,QAAQ,GAAG;EAClC,MAAM5B,GAAG,CAAC,CAACC,IAAI,CAACyB,YAAY,CAAC,EAAEzB,IAAI,CAAC0B,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}