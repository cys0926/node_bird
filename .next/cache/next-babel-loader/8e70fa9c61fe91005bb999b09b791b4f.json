{"ast":null,"code":"import { all, fork, call, take, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\");\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\");\n}\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"names":["all","fork","call","take","put","axios","logInAPI","post","logIn","result","type","data","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/index.js"],"sourcesContent":["import { all, fork, call, take, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logInAPI); // call 은 동기, fork 는 비동기\n    yield put({ type: \"LOG_OUT_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\");\n}\n\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\");\n}\n\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC/D,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,GAAG;EAClB,OAAOD,KAAK,CAACE,IAAI,CAAC,YAAY,CAAC;AACjC;AAEA,UAAUC,KAAK,GAAG;EAChB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMP,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;IACrC,MAAMF,GAAG,CAAC;MAAEM,IAAI,EAAE,gBAAgB;MAAEC,IAAI,EAAEF,MAAM,CAACE;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMR,GAAG,CAAC;MAAEM,IAAI,EAAE,gBAAgB;MAAEC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EAChE;AACF;AAEA,SAASG,SAAS,GAAG;EACnB,OAAOT,KAAK,CAACE,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAM,GAAG;EACjB,IAAI;IACF,MAAMN,MAAM,GAAG,MAAMP,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;IACrC,MAAMF,GAAG,CAAC;MAAEM,IAAI,EAAE,iBAAiB;MAAEC,IAAI,EAAEF,MAAM,CAACE;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMR,GAAG,CAAC;MAAEM,IAAI,EAAE,iBAAiB;MAAEC,IAAI,EAAEC,GAAG,CAACC,QAAQ,CAACF;IAAK,CAAC,CAAC;EACjE;AACF;AAEA,UAAUK,UAAU,GAAG;EACrB,MAAMb,IAAI,CAAC,gBAAgB,EAAEK,KAAK,CAAC;AACrC;AAEA,UAAUS,WAAW,GAAG;EACtB,MAAMd,IAAI,CAAC,iBAAiB,CAAC;AAC/B;AAEA,UAAUe,YAAY,GAAG;EACvB,MAAMf,IAAI,CAAC,kBAAkB,CAAC;AAChC;AAEA,eAAe,UAAUgB,QAAQ,GAAG;EAClC;EACA,MAAMnB,GAAG,CAAC,CAACC,IAAI,CAACe,UAAU,CAAC,EAAEf,IAAI,CAACgB,WAAW,CAAC,EAAEhB,IAAI,CAACiB,YAAY,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}