{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle, takeLatest, takeEvery, takeLeading, takeMaybe } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\n// while(true) 대신 takeEvery 를 사용함\n// takeLatest 는 마지막 요청만 실행 (하지만 서버 요청이 2번 감, 응답을 취소하는 것이다.)\n// takeLeading 은 첫벗째 요청만 실행\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"names":["all","fork","call","take","put","delay","debounce","throttle","takeLatest","takeEvery","takeLeading","takeMaybe","axios","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/index.js"],"sourcesContent":["import {\n  all,\n  fork,\n  call,\n  take,\n  put,\n  delay,\n  debounce,\n  throttle,\n  takeLatest,\n  takeEvery,\n  takeLeading,\n  takeMaybe,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_IN_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: \"LOG_OUT_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"LOG_OUT_FAILURE\", data: err.response.data });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield put({ type: \"ADD_POST_SUCCESS\", data: result.data });\n  } catch (err) {\n    yield put({ type: \"ADD_POST_FAILURE\", data: err.response.data });\n  }\n}\n\n// while(true) 대신 takeEvery 를 사용함\n// takeLatest 는 마지막 요청만 실행 (하지만 서버 요청이 2번 감, 응답을 취소하는 것이다.)\n// takeLeading 은 첫벗째 요청만 실행\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nexport default function* rootSaga() {\n  // fork 와 call 은 다름\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,GAAG,EACHC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,UAAU,EACVC,SAAS,EACTC,WAAW,EACXC,SAAS,QACJ,oBAAoB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtB,IAAI;IACF;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MAAEc,IAAI,EAAE,gBAAgB;MAAEJ,IAAI,EAAEK,MAAM,CAACL;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMhB,GAAG,CAAC;MAAEc,IAAI,EAAE,gBAAgB;MAAEJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IAAK,CAAC,CAAC;EAChE;AACF;AAEA,SAASQ,SAAS,GAAG;EACnB,OAAOV,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUQ,MAAM,GAAG;EACjB,IAAI;IACF;IACA,MAAMlB,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MAAEc,IAAI,EAAE,iBAAiB;MAAEJ,IAAI,EAAEK,MAAM,CAACL;IAAK,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMhB,GAAG,CAAC;MAAEc,IAAI,EAAE,iBAAiB;MAAEJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IAAK,CAAC,CAAC;EACjE;AACF;AAEA,SAASU,UAAU,CAACV,IAAI,EAAE;EACxB,OAAOF,KAAK,CAACG,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUW,OAAO,CAACR,MAAM,EAAE;EACxB,IAAI;IACF,MAAME,MAAM,GAAG,MAAMjB,IAAI,CAACsB,UAAU,EAAEP,MAAM,CAACH,IAAI,CAAC,CAAC,CAAC;IACpD,MAAMV,GAAG,CAAC;MAAEc,IAAI,EAAE,kBAAkB;MAAEJ,IAAI,EAAEK,MAAM,CAACL;IAAK,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMhB,GAAG,CAAC;MAAEc,IAAI,EAAE,kBAAkB;MAAEJ,IAAI,EAAEM,GAAG,CAACC,QAAQ,CAACP;IAAK,CAAC,CAAC;EAClE;AACF;;AAEA;AACA;AACA;AACA,UAAUY,UAAU,GAAG;EACrB,MAAMlB,UAAU,CAAC,gBAAgB,EAAEQ,KAAK,CAAC;AAC3C;AAEA,UAAUW,WAAW,GAAG;EACtB,MAAMnB,UAAU,CAAC,iBAAiB,EAAEe,MAAM,CAAC;AAC7C;AAEA,UAAUK,YAAY,GAAG;EACvB,MAAMrB,QAAQ,CAAC,kBAAkB,EAAEkB,OAAO,EAAE,IAAI,CAAC;AACnD;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC;EACA,MAAM7B,GAAG,CAAC,CAACC,IAAI,CAACyB,UAAU,CAAC,EAAEzB,IAAI,CAAC0B,WAAW,CAAC,EAAE1B,IAAI,CAAC2B,YAAY,CAAC,CAAC,CAAC;AACtE"},"metadata":{},"sourceType":"module"}