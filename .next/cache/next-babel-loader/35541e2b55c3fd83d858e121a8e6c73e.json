{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    console.log(\"saga login\");\n    // const result = yield call(logInAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\"\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","fork","put","delay","takeLatest","axios","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/user.js"],"sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga login\");\n    // const result = yield call(logInAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: \"LOG_IN_SUCCESS\", data: action.data });\n  } catch (err) {\n    yield put({ type: \"LOG_IN_FAILURE\", error: err.response.data });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: \"LOG_OUT_SUCCESS\" });\n  } catch (err) {\n    yield put({ type: \"LOG_OUT_FAILURE\", error: err.response.data });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB,OAAOF,KAAK,CAACG,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;AACvC;AAEA,UAAUE,KAAK,CAACC,MAAM,EAAE;EACtB,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB;IACA,MAAMT,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MAAEW,IAAI,EAAE,gBAAgB;MAAEN,IAAI,EAAEG,MAAM,CAACH;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MAAEW,IAAI,EAAE,gBAAgB;MAAEE,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IAAK,CAAC,CAAC;EACjE;AACF;AAEA,SAASU,SAAS,GAAG;EACnB,OAAOZ,KAAK,CAACG,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUU,MAAM,GAAG;EACjB,IAAI;IACF;IACA,MAAMf,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MAAEW,IAAI,EAAE;IAAkB,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMZ,GAAG,CAAC;MAAEW,IAAI,EAAE,iBAAiB;MAAEE,KAAK,EAAED,GAAG,CAACE,QAAQ,CAACT;IAAK,CAAC,CAAC;EAClE;AACF;AAEA,UAAUY,UAAU,GAAG;EACrB,MAAMf,UAAU,CAAC,gBAAgB,EAAEK,KAAK,CAAC;AAC3C;AAEA,UAAUW,WAAW,GAAG;EACtB,MAAMhB,UAAU,CAAC,iBAAiB,EAAEc,MAAM,CAAC;AAC7C;AAEA,eAAe,UAAUG,QAAQ,GAAG;EAClC,MAAMrB,GAAG,CAAC,CAACC,IAAI,CAACkB,UAAU,CAAC,EAAElB,IAAI,CAACmB,WAAW,CAAC,CAAC,CAAC;AAClD"},"metadata":{},"sourceType":"module"}