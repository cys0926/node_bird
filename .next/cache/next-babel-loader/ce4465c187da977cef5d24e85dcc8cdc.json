{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\source\\\\infearn\\\\node_bird\\\\front\\\\components\\\\PostForm.jsx\",\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { addPost } from \"../reducers/post\";\nvar PostForm = function PostForm() {\n  _s();\n  var _useSelector = useSelector(function (state) {\n      return state.post;\n    }),\n    imagePaths = _useSelector.imagePaths,\n    addPostDone = _useSelector.addPostDone;\n  var dispatch = useDispatch();\n  var imageInput = useRef();\n  var _useInput = useInput(\"\"),\n    _useInput2 = _slicedToArray(_useInput, 3),\n    text = _useInput2[0],\n    onChangeText = _useInput2[1],\n    setText = _useInput2[2];\n  var onSubmit = useCallback(function () {\n    dispatch(addPost(text));\n  }, [text]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  useEffect(function () {\n    if (addPostDone) {}\n  }, [addPostDone]);\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, imagePaths.map(function (path) {\n    return __jsx(\"div\", {\n      key: path,\n      style: {\n        display: \"inline-block\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      src: path,\n      style: {\n        width: \"200px\"\n      },\n      alt: path,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n_s(PostForm, \"TgFb3dz8iInRznTV/H7jgF3nXQo=\", false, function () {\n  return [useSelector, useDispatch, useInput];\n});\n_c = PostForm;\nexport default PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","Button","Form","Input","useDispatch","useSelector","useInput","addPost","PostForm","state","post","imagePaths","addPostDone","dispatch","imageInput","text","onChangeText","setText","onSubmit","onClickImageUpload","current","click","margin","map","path","display","width"],"sources":["D:/source/infearn/node_bird/front/components/PostForm.jsx"],"sourcesContent":["import React, {useCallback, useEffect, useRef} from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useInput\";\nimport { addPost } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\n  const dispatch = useDispatch();\n  const imageInput = useRef();\n  const [text, onChangeText, setText] = useInput(\"\");\n\n  const onSubmit = useCallback(() => {\n    dispatch(addPost(text));\n  }, [text]);\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  useEffect(()=>{\n    if(addPostDone){\n      \n    }\n\n  },[addPostDone])\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n      />\n      <div>\n        <input type=\"file\" multiple hidden ref={imageInput} />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\n          짹짹\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((path) => (\n          <div key={path} style={{ display: \"inline-block\" }}>\n            <img src={path} style={{ width: \"200px\" }} alt={path} />\n            <div>\n              <Button>제거</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}