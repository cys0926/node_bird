{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost()\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","log","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["D:/source/infearn/node_bird/front/sagas/post.js"],"sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortId from \"shortid\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS, generateDummyPost,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: LOAD_POSTS_SUCCESS, data: generateDummyPost() });\n  } catch (err) {\n    yield put({ type: LOAD_POSTS_FAILURE, error: err.response.data });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    const id = shortId.generate();\n    yield delay(1000);\n    yield put({ type: ADD_POST_SUCCESS, data: { id, content: action.data } });\n    yield put({ type: ADD_POST_TO_ME, data: id });\n  } catch (err) {\n    yield put({ type: ADD_POST_FAILURE, error: err.response.data });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({ type: REMOVE_POST_OF_ME, data: action.data });\n  } catch (err) {\n    yield put({ type: REMOVE_POST_FAILURE, error: err.response.data });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    console.log(\"saga comment\");\n    // const result = yield call(addCommentAPI, action.data); // call 은 동기, fork 는 비동기\n    yield delay(1000);\n    yield put({ type: ADD_COMMENT_SUCCESS, data: action.data });\n  } catch (err) {\n    yield put({ type: ADD_COMMENT_FAILURE, error: err.response.data });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPosts),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}